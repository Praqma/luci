#! /bin/sh

# This function starts a Jenkins system, and check if its running.
# It creates a custum config.xml, and a location file for jenkins.
# It also creates ssh-keys for slaves, and build the data container for
# the slaves, containing the authorized-keys file.
# 1: Name of jenkins master container to create
# 2: Data container with public and private keys
# 3: Data container to use in the jenkins master container
# 4: Port on docker host bound to the 8080 on the jenkins master container
# 5: Prefix for Jenkins command. Used to add subfolder for Jenkins
startJenkins(){
    local jenkinsContainerName=$1 # Container to create
    local secretsContainer$2
    local dataContainer=$3        # existing container
    local jPort=$4
    local prefix=$5
    local jenkinsPrefix=""
    local jenkinsSubFolder=""

    # If the prefix is set, set the var that will be added to the run command
    # Else, make it empty.
    if [ ! -z "$prefix" ]; then
      jenkinsPrefix="--prefix=/$prefix"
      jenkinsSubFolder="/$prefix/"
    fi

    # Start the Jenkins master container and Cleanup
    runZettaTools docker run --volumes-from $secretsContainer -d -p $jPort:8080 -p 50000:50000 --name $jenkinsContainerName luci/jenkins:0.1 $dataContainer http://$LUCI_DOCKER_HOST:$LUCI_DOCKER_PORT http://$LUCI_DOCKER_HOST:$jPort heh@praqma.net $jenkinsPrefix
    cleanup_container $jenkinsContainerName

    # Wait for the server to respond ready
    waitForJenkinsRunning $jenkinsContainerName

    # Now wait for the web ui to respond
    waitForHttpSuccess $LUCI_DOCKER_HOST:$jPort$jenkinsSubFolder 60
}

# A simple function that creates a very simple hello world Jenkins Job.
createJenkinsGradleJob(){
  # $1 Location of the jenkins-cli.jar file.
  # $2 The name you want to give the Jenkins gradle Job.
  # IMPORTANT : The job name cannot have spaces

  local cli=$1
  local jobName=$2

  $LUCI_ROOT/bin/gradle-jenkins-job.sh | runJenkinsCli $cli create-job $jobName
}

# A simple function that creates a very simple hello world Jenkins Job.
createJenkinsShellJob(){
  # $1 defines the shell script you want run in the job. Eg. echo "hello world"
  # $2 Location of the jenkins-cli.jar file.
  # $3 The name you want to give the Jenkins Job.
  local jJobCmd=$1
  local cli=$2
  local jobName=$3
  $LUCI_ROOT/bin/simple-jenkins-job.sh $jJobCmd | runJenkinsCli $cli create-job $jobName
}

# Creates a simple Jenkins job that uses a Docker slave by adding a label
createJenkinsDockerJob(){
  # $1 is the command you want run in the Docker container slave. Eg env.
  # $2 is the label, specifying which slave you want the job to run at
  # $3 location of the jenkins-cli-jar file.
  # $4 is the name you want to give the Jenkins job.
  local jJobCmd=$1
  local jobLabel=$2
  local cli=$3
  local jobName=$4
  $LUCI_ROOT/bin/docker-jenkins-job.sh $jJobCmd $jobLabel | runJenkinsCli $cli create-job $jobName
}

# This function feeds our waitForLine function with docker logs output.
waitForJenkinsRunning() {
    # $1 is the id of the container you need the logs for.
    local containerId=$1
    dockerLogs $containerId | waitForLine "setting agent port for jnlp" 120
    local rc=$?
    return $rc
}

# A function to run commands on the Jenkins Server through jenkins-cli.jar
runJenkinsCli() {
    # $1 is the location of the jenkins-cli.jar file.
    local cli=$1
    shift
    java -jar "$cli" -s http://$LUCI_DOCKER_HOST:$jPort -noKeyAuth "$@"
}
